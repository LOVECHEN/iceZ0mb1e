                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.8.0 #10562 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module i2c
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _delay
                             12 	.globl _i2c_config
                             13 	.globl _i2c_wait_req
                             14 	.globl _i2c_addr
                             15 	.globl _i2c_write
                             16 	.globl _i2c_read
                             17 	.globl _i2c_read_buf
                             18 	.globl _i2c_write_buf
                             19 ;--------------------------------------------------------
                             20 ; special function registers
                             21 ;--------------------------------------------------------
                     0018    22 _uart_dm0	=	0x0018
                     0018    23 _uart_thr	=	0x0018
                     0018    24 _uart_rbr	=	0x0018
                     0019    25 _uart_dm1	=	0x0019
                     0019    26 _uart_ier	=	0x0019
                     001A    27 _uart_iir	=	0x001a
                     001B    28 _uart_lcr	=	0x001b
                     001C    29 _uart_mcr	=	0x001c
                     001D    30 _uart_lsr	=	0x001d
                     001E    31 _uart_msr	=	0x001e
                     001F    32 _uart_scr	=	0x001f
                     0040    33 _port_a	=	0x0040
                     0041    34 _port_b	=	0x0041
                     0042    35 _port_cfg	=	0x0042
                     0050    36 _i2c_status	=	0x0050
                     0052    37 _i2c_clkdiv	=	0x0052
                     0053    38 _i2c_cmd	=	0x0053
                     0054    39 _i2c_dat_in	=	0x0054
                     0055    40 _i2c_dat_out	=	0x0055
                     0060    41 _spi_status	=	0x0060
                     0061    42 _spi_cfg	=	0x0061
                     0062    43 _spi_clkdiv	=	0x0062
                     0063    44 _spi_cmd	=	0x0063
                     0064    45 _spi_dat_in	=	0x0064
                     0065    46 _spi_dat_out	=	0x0065
                             47 ;--------------------------------------------------------
                             48 ; ram data
                             49 ;--------------------------------------------------------
                             50 	.area _DATA
                             51 ;--------------------------------------------------------
                             52 ; ram data
                             53 ;--------------------------------------------------------
                             54 	.area _INITIALIZED
                             55 ;--------------------------------------------------------
                             56 ; absolute external ram data
                             57 ;--------------------------------------------------------
                             58 	.area _DABS (ABS)
                             59 ;--------------------------------------------------------
                             60 ; global & static initialisations
                             61 ;--------------------------------------------------------
                             62 	.area _HOME
                             63 	.area _GSINIT
                             64 	.area _GSFINAL
                             65 	.area _GSINIT
                             66 ;--------------------------------------------------------
                             67 ; Home
                             68 ;--------------------------------------------------------
                             69 	.area _HOME
                             70 	.area _HOME
                             71 ;--------------------------------------------------------
                             72 ; code
                             73 ;--------------------------------------------------------
                             74 	.area _CODE
                             75 ;api/i2c.c:44: void i2c_config(uint8_t clock_div)
                             76 ;	---------------------------------
                             77 ; Function i2c_config
                             78 ; ---------------------------------
   0000                      79 _i2c_config::
                             80 ;api/i2c.c:46: i2c_cmd = 0x00;
   0000 3E 00         [ 7]   81 	ld	a, #0x00
   0002 D3 53         [11]   82 	out	(_i2c_cmd), a
                             83 ;api/i2c.c:47: i2c_clkdiv = clock_div/2;
   0004 FD 21 02 00   [14]   84 	ld	iy, #2
   0008 FD 39         [15]   85 	add	iy, sp
   000A FD 6E 00      [19]   86 	ld	l, 0 (iy)
   000D 26 00         [ 7]   87 	ld	h, #0x00
   000F 4D            [ 4]   88 	ld	c, l
   0010 5C            [ 4]   89 	ld	e, h
   0011 CB 7C         [ 8]   90 	bit	7, h
   0013 28 03         [12]   91 	jr	Z,00103$
   0015 23            [ 6]   92 	inc	hl
   0016 4D            [ 4]   93 	ld	c, l
   0017 5C            [ 4]   94 	ld	e, h
   0018                      95 00103$:
   0018 CB 2B         [ 8]   96 	sra	e
   001A CB 19         [ 8]   97 	rr	c
   001C 79            [ 4]   98 	ld	a, c
   001D D3 52         [11]   99 	out	(_i2c_clkdiv), a
                            100 ;api/i2c.c:48: }
   001F C9            [10]  101 	ret
                            102 ;api/i2c.c:50: void i2c_wait_req()
                            103 ;	---------------------------------
                            104 ; Function i2c_wait_req
                            105 ; ---------------------------------
   0020                     106 _i2c_wait_req::
                            107 ;api/i2c.c:52: while((i2c_status & I2C_STAT_REQ) == 0);
   0020                     108 00101$:
   0020 DB 50         [11]  109 	in	a, (_i2c_status)
   0022 0F            [ 4]  110 	rrca
   0023 30 FB         [12]  111 	jr	NC,00101$
                            112 ;api/i2c.c:53: }
   0025 C9            [10]  113 	ret
                            114 ;api/i2c.c:55: void i2c_addr(uint8_t addr, uint8_t mode)
                            115 ;	---------------------------------
                            116 ; Function i2c_addr
                            117 ; ---------------------------------
   0026                     118 _i2c_addr::
                            119 ;api/i2c.c:57: i2c_dat_out = (addr << 1) | mode;
   0026 21 02 00      [10]  120 	ld	hl, #2+0
   0029 39            [11]  121 	add	hl, sp
   002A 7E            [ 7]  122 	ld	a, (hl)
   002B 87            [ 4]  123 	add	a, a
   002C 21 03 00      [10]  124 	ld	hl, #3+0
   002F 39            [11]  125 	add	hl, sp
   0030 B6            [ 7]  126 	or	a, (hl)
   0031 D3 55         [11]  127 	out	(_i2c_dat_out), a
                            128 ;api/i2c.c:58: delay(30); //HACK
   0033 21 1E 00      [10]  129 	ld	hl, #0x001e
   0036 E5            [11]  130 	push	hl
   0037 CDr00r00      [17]  131 	call	_delay
   003A F1            [10]  132 	pop	af
                            133 ;api/i2c.c:59: i2c_cmd = I2C_CMD_ACK_Z | I2C_CMD_WR | I2C_CMD_START;
   003B 3E 11         [ 7]  134 	ld	a, #0x11
   003D D3 53         [11]  135 	out	(_i2c_cmd), a
                            136 ;api/i2c.c:60: i2c_wait_req();
                            137 ;api/i2c.c:61: }
   003F C3r20r00      [10]  138 	jp  _i2c_wait_req
                            139 ;api/i2c.c:63: void i2c_write(uint8_t value, uint8_t mode )
                            140 ;	---------------------------------
                            141 ; Function i2c_write
                            142 ; ---------------------------------
   0042                     143 _i2c_write::
                            144 ;api/i2c.c:65: i2c_dat_out = value;
   0042 21 02 00      [10]  145 	ld	hl, #2+0
   0045 39            [11]  146 	add	hl, sp
   0046 7E            [ 7]  147 	ld	a, (hl)
   0047 D3 55         [11]  148 	out	(_i2c_dat_out), a
                            149 ;api/i2c.c:66: delay(30); //HACK
   0049 21 1E 00      [10]  150 	ld	hl, #0x001e
   004C E5            [11]  151 	push	hl
   004D CDr00r00      [17]  152 	call	_delay
   0050 F1            [10]  153 	pop	af
                            154 ;api/i2c.c:67: i2c_cmd = I2C_CMD_WR | I2C_CMD_START | mode;
   0051 21 03 00      [10]  155 	ld	hl, #3+0
   0054 39            [11]  156 	add	hl, sp
   0055 7E            [ 7]  157 	ld	a, (hl)
   0056 F6 01         [ 7]  158 	or	a, #0x01
   0058 D3 53         [11]  159 	out	(_i2c_cmd), a
                            160 ;api/i2c.c:68: i2c_wait_req();
                            161 ;api/i2c.c:69: }
   005A C3r20r00      [10]  162 	jp  _i2c_wait_req
                            163 ;api/i2c.c:71: uint8_t i2c_read(uint8_t mode)
                            164 ;	---------------------------------
                            165 ; Function i2c_read
                            166 ; ---------------------------------
   005D                     167 _i2c_read::
                            168 ;api/i2c.c:73: i2c_cmd = I2C_CMD_RD | I2C_CMD_START | mode;
   005D 21 02 00      [10]  169 	ld	hl, #2+0
   0060 39            [11]  170 	add	hl, sp
   0061 7E            [ 7]  171 	ld	a, (hl)
   0062 F6 09         [ 7]  172 	or	a, #0x09
   0064 D3 53         [11]  173 	out	(_i2c_cmd), a
                            174 ;api/i2c.c:74: i2c_wait_req();
   0066 CDr20r00      [17]  175 	call	_i2c_wait_req
                            176 ;api/i2c.c:75: return i2c_dat_in;
   0069 DB 54         [11]  177 	in	a, (_i2c_dat_in)
   006B 6F            [ 4]  178 	ld	l, a
                            179 ;api/i2c.c:76: }
   006C C9            [10]  180 	ret
                            181 ;api/i2c.c:78: void i2c_read_buf(uint8_t addr, uint8_t *buf, uint16_t size)
                            182 ;	---------------------------------
                            183 ; Function i2c_read_buf
                            184 ; ---------------------------------
   006D                     185 _i2c_read_buf::
   006D CDr00r00      [17]  186 	call	___sdcc_enter_ix
   0070 F5            [11]  187 	push	af
                            188 ;api/i2c.c:82: i2c_addr(addr, I2C_ADDR_WR);
   0071 AF            [ 4]  189 	xor	a, a
   0072 F5            [11]  190 	push	af
   0073 33            [ 6]  191 	inc	sp
   0074 DD 7E 04      [19]  192 	ld	a, 4 (ix)
   0077 F5            [11]  193 	push	af
   0078 33            [ 6]  194 	inc	sp
   0079 CDr26r00      [17]  195 	call	_i2c_addr
                            196 ;api/i2c.c:84: i2c_write(0x00, I2C_CMD_ACK_Z | I2C_CMD_STOP);
   007C 26 14         [ 7]  197 	ld	h,#0x14
   007E E3            [19]  198 	ex	(sp),hl
   007F 33            [ 6]  199 	inc	sp
   0080 AF            [ 4]  200 	xor	a, a
   0081 F5            [11]  201 	push	af
   0082 33            [ 6]  202 	inc	sp
   0083 CDr42r00      [17]  203 	call	_i2c_write
                            204 ;api/i2c.c:86: i2c_addr(addr, I2C_ADDR_RD);
   0086 26 01         [ 7]  205 	ld	h,#0x01
   0088 E3            [19]  206 	ex	(sp),hl
   0089 33            [ 6]  207 	inc	sp
   008A DD 7E 04      [19]  208 	ld	a, 4 (ix)
   008D F5            [11]  209 	push	af
   008E 33            [ 6]  210 	inc	sp
   008F CDr26r00      [17]  211 	call	_i2c_addr
   0092 F1            [10]  212 	pop	af
                            213 ;api/i2c.c:88: for(i=0; i < size; i++)
   0093 DD 7E 07      [19]  214 	ld	a, 7 (ix)
   0096 C6 FF         [ 7]  215 	add	a, #0xff
   0098 DD 77 FE      [19]  216 	ld	-2 (ix), a
   009B DD 7E 08      [19]  217 	ld	a, 8 (ix)
   009E CE FF         [ 7]  218 	adc	a, #0xff
   00A0 DD 77 FF      [19]  219 	ld	-1 (ix), a
   00A3 11 00 00      [10]  220 	ld	de, #0x0000
   00A6                     221 00106$:
   00A6 7B            [ 4]  222 	ld	a, e
   00A7 DD 96 07      [19]  223 	sub	a, 7 (ix)
   00AA 7A            [ 4]  224 	ld	a, d
   00AB DD 9E 08      [19]  225 	sbc	a, 8 (ix)
   00AE 30 36         [12]  226 	jr	NC,00108$
                            227 ;api/i2c.c:92: buf[i] = i2c_read(I2C_CMD_ACK_Z | I2C_CMD_STOP);
   00B0 DD 7E 05      [19]  228 	ld	a, 5 (ix)
   00B3 83            [ 4]  229 	add	a, e
   00B4 4F            [ 4]  230 	ld	c, a
   00B5 DD 7E 06      [19]  231 	ld	a, 6 (ix)
   00B8 8A            [ 4]  232 	adc	a, d
   00B9 47            [ 4]  233 	ld	b, a
                            234 ;api/i2c.c:90: if(i == (size-1))
   00BA DD 7E FE      [19]  235 	ld	a, -2 (ix)
   00BD 93            [ 4]  236 	sub	a, e
   00BE 20 16         [12]  237 	jr	NZ,00102$
   00C0 DD 7E FF      [19]  238 	ld	a, -1 (ix)
   00C3 92            [ 4]  239 	sub	a, d
   00C4 20 10         [12]  240 	jr	NZ,00102$
                            241 ;api/i2c.c:92: buf[i] = i2c_read(I2C_CMD_ACK_Z | I2C_CMD_STOP);
   00C6 C5            [11]  242 	push	bc
   00C7 D5            [11]  243 	push	de
   00C8 3E 14         [ 7]  244 	ld	a, #0x14
   00CA F5            [11]  245 	push	af
   00CB 33            [ 6]  246 	inc	sp
   00CC CDr5Dr00      [17]  247 	call	_i2c_read
   00CF 33            [ 6]  248 	inc	sp
   00D0 7D            [ 4]  249 	ld	a, l
   00D1 D1            [10]  250 	pop	de
   00D2 C1            [10]  251 	pop	bc
   00D3 02            [ 7]  252 	ld	(bc), a
   00D4 18 0D         [12]  253 	jr	00107$
   00D6                     254 00102$:
                            255 ;api/i2c.c:96: buf[i] = i2c_read(I2C_CMD_ACK_L);
   00D6 C5            [11]  256 	push	bc
   00D7 D5            [11]  257 	push	de
   00D8 AF            [ 4]  258 	xor	a, a
   00D9 F5            [11]  259 	push	af
   00DA 33            [ 6]  260 	inc	sp
   00DB CDr5Dr00      [17]  261 	call	_i2c_read
   00DE 33            [ 6]  262 	inc	sp
   00DF 7D            [ 4]  263 	ld	a, l
   00E0 D1            [10]  264 	pop	de
   00E1 C1            [10]  265 	pop	bc
   00E2 02            [ 7]  266 	ld	(bc), a
   00E3                     267 00107$:
                            268 ;api/i2c.c:88: for(i=0; i < size; i++)
   00E3 13            [ 6]  269 	inc	de
   00E4 18 C0         [12]  270 	jr	00106$
   00E6                     271 00108$:
                            272 ;api/i2c.c:99: }
   00E6 F1            [10]  273 	pop	af
   00E7 DD E1         [14]  274 	pop	ix
   00E9 C9            [10]  275 	ret
                            276 ;api/i2c.c:101: void i2c_write_buf(uint8_t addr, uint8_t* buf, uint16_t size )
                            277 ;	---------------------------------
                            278 ; Function i2c_write_buf
                            279 ; ---------------------------------
   00EA                     280 _i2c_write_buf::
   00EA CDr00r00      [17]  281 	call	___sdcc_enter_ix
   00ED F5            [11]  282 	push	af
                            283 ;api/i2c.c:105: i2c_addr(addr, I2C_ADDR_WR);
   00EE AF            [ 4]  284 	xor	a, a
   00EF F5            [11]  285 	push	af
   00F0 33            [ 6]  286 	inc	sp
   00F1 DD 7E 04      [19]  287 	ld	a, 4 (ix)
   00F4 F5            [11]  288 	push	af
   00F5 33            [ 6]  289 	inc	sp
   00F6 CDr26r00      [17]  290 	call	_i2c_addr
   00F9 F1            [10]  291 	pop	af
                            292 ;api/i2c.c:107: for(i=0; i < size; i++)
   00FA DD 7E 07      [19]  293 	ld	a, 7 (ix)
   00FD C6 FF         [ 7]  294 	add	a, #0xff
   00FF DD 77 FE      [19]  295 	ld	-2 (ix), a
   0102 DD 7E 08      [19]  296 	ld	a, 8 (ix)
   0105 CE FF         [ 7]  297 	adc	a, #0xff
   0107 DD 77 FF      [19]  298 	ld	-1 (ix), a
   010A 01 00 00      [10]  299 	ld	bc, #0x0000
   010D                     300 00106$:
   010D 79            [ 4]  301 	ld	a, c
   010E DD 96 07      [19]  302 	sub	a, 7 (ix)
   0111 78            [ 4]  303 	ld	a, b
   0112 DD 9E 08      [19]  304 	sbc	a, 8 (ix)
   0115 30 31         [12]  305 	jr	NC,00108$
                            306 ;api/i2c.c:111: i2c_write(buf[i], I2C_CMD_ACK_Z | I2C_CMD_STOP);
   0117 DD 6E 05      [19]  307 	ld	l, 5 (ix)
   011A DD 66 06      [19]  308 	ld	h, 6 (ix)
   011D 09            [11]  309 	add	hl, bc
   011E 56            [ 7]  310 	ld	d, (hl)
                            311 ;api/i2c.c:109: if(i == (size-1))
   011F DD 7E FE      [19]  312 	ld	a, -2 (ix)
   0122 91            [ 4]  313 	sub	a, c
   0123 20 14         [12]  314 	jr	NZ,00102$
   0125 DD 7E FF      [19]  315 	ld	a, -1 (ix)
   0128 90            [ 4]  316 	sub	a, b
   0129 20 0E         [12]  317 	jr	NZ,00102$
                            318 ;api/i2c.c:111: i2c_write(buf[i], I2C_CMD_ACK_Z | I2C_CMD_STOP);
   012B C5            [11]  319 	push	bc
   012C 3E 14         [ 7]  320 	ld	a, #0x14
   012E F5            [11]  321 	push	af
   012F 33            [ 6]  322 	inc	sp
   0130 D5            [11]  323 	push	de
   0131 33            [ 6]  324 	inc	sp
   0132 CDr42r00      [17]  325 	call	_i2c_write
   0135 F1            [10]  326 	pop	af
   0136 C1            [10]  327 	pop	bc
   0137 18 0C         [12]  328 	jr	00107$
   0139                     329 00102$:
                            330 ;api/i2c.c:115: i2c_write(buf[i], I2C_CMD_ACK_Z);
   0139 C5            [11]  331 	push	bc
   013A 3E 10         [ 7]  332 	ld	a, #0x10
   013C F5            [11]  333 	push	af
   013D 33            [ 6]  334 	inc	sp
   013E D5            [11]  335 	push	de
   013F 33            [ 6]  336 	inc	sp
   0140 CDr42r00      [17]  337 	call	_i2c_write
   0143 F1            [10]  338 	pop	af
   0144 C1            [10]  339 	pop	bc
   0145                     340 00107$:
                            341 ;api/i2c.c:107: for(i=0; i < size; i++)
   0145 03            [ 6]  342 	inc	bc
   0146 18 C5         [12]  343 	jr	00106$
   0148                     344 00108$:
                            345 ;api/i2c.c:118: }
   0148 F1            [10]  346 	pop	af
   0149 DD E1         [14]  347 	pop	ix
   014B C9            [10]  348 	ret
                            349 	.area _CODE
                            350 	.area _INITIALIZER
                            351 	.area _CABS (ABS)
