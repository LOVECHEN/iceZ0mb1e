                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.8.0 #10562 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module uart
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _putchar
                             12 	.globl _getchar
                             13 	.globl _uart_write
                             14 	.globl _uart_initialize
                             15 ;--------------------------------------------------------
                             16 ; special function registers
                             17 ;--------------------------------------------------------
                     0018    18 _uart_dm0	=	0x0018
                     0018    19 _uart_thr	=	0x0018
                     0018    20 _uart_rbr	=	0x0018
                     0019    21 _uart_dm1	=	0x0019
                     0019    22 _uart_ier	=	0x0019
                     001A    23 _uart_iir	=	0x001a
                     001B    24 _uart_lcr	=	0x001b
                     001C    25 _uart_mcr	=	0x001c
                     001D    26 _uart_lsr	=	0x001d
                     001E    27 _uart_msr	=	0x001e
                     001F    28 _uart_scr	=	0x001f
                     0040    29 _port_a	=	0x0040
                     0041    30 _port_b	=	0x0041
                     0042    31 _port_cfg	=	0x0042
                     0050    32 _i2c_status	=	0x0050
                     0052    33 _i2c_clkdiv	=	0x0052
                     0053    34 _i2c_cmd	=	0x0053
                     0054    35 _i2c_dat_in	=	0x0054
                     0055    36 _i2c_dat_out	=	0x0055
                     0060    37 _spi_status	=	0x0060
                     0061    38 _spi_cfg	=	0x0061
                     0062    39 _spi_clkdiv	=	0x0062
                     0063    40 _spi_cmd	=	0x0063
                     0064    41 _spi_dat_in	=	0x0064
                     0065    42 _spi_dat_out	=	0x0065
                             43 ;--------------------------------------------------------
                             44 ; ram data
                             45 ;--------------------------------------------------------
                             46 	.area _DATA
                             47 ;--------------------------------------------------------
                             48 ; ram data
                             49 ;--------------------------------------------------------
                             50 	.area _INITIALIZED
                             51 ;--------------------------------------------------------
                             52 ; absolute external ram data
                             53 ;--------------------------------------------------------
                             54 	.area _DABS (ABS)
                             55 ;--------------------------------------------------------
                             56 ; global & static initialisations
                             57 ;--------------------------------------------------------
                             58 	.area _HOME
                             59 	.area _GSINIT
                             60 	.area _GSFINAL
                             61 	.area _GSINIT
                             62 ;--------------------------------------------------------
                             63 ; Home
                             64 ;--------------------------------------------------------
                             65 	.area _HOME
                             66 	.area _HOME
                             67 ;--------------------------------------------------------
                             68 ; code
                             69 ;--------------------------------------------------------
                             70 	.area _CODE
                             71 ;api/uart.c:38: int putchar(int c)
                             72 ;	---------------------------------
                             73 ; Function putchar
                             74 ; ---------------------------------
   0000                      75 _putchar::
                             76 ;api/uart.c:40: uart_thr = c;
   0000 21 02 00      [10]   77 	ld	hl, #2+0
   0003 39            [11]   78 	add	hl, sp
   0004 7E            [ 7]   79 	ld	a, (hl)
   0005 D3 18         [11]   80 	out	(_uart_thr), a
                             81 ;api/uart.c:41: while ((uart_lsr & SBIT_THRE) == 0);
   0007                      82 00101$:
   0007 DB 1D         [11]   83 	in	a, (_uart_lsr)
   0009 CB 6F         [ 8]   84 	bit	5, a
   000B 28 FA         [12]   85 	jr	Z,00101$
                             86 ;api/uart.c:42: return c;
   000D C1            [10]   87 	pop	bc
   000E E1            [10]   88 	pop	hl
   000F E5            [11]   89 	push	hl
   0010 C5            [11]   90 	push	bc
                             91 ;api/uart.c:43: }
   0011 C9            [10]   92 	ret
                             93 ;api/uart.c:49: int getchar()
                             94 ;	---------------------------------
                             95 ; Function getchar
                             96 ; ---------------------------------
   0012                      97 _getchar::
                             98 ;api/uart.c:52: while ((uart_lsr & SBIT_DR) == 0);
   0012                      99 00101$:
   0012 DB 1D         [11]  100 	in	a, (_uart_lsr)
   0014 0F            [ 4]  101 	rrca
   0015 30 FB         [12]  102 	jr	NC,00101$
                            103 ;api/uart.c:53: return uart_rbr;
   0017 DB 18         [11]  104 	in	a, (_uart_rbr)
   0019 6F            [ 4]  105 	ld	l, a
   001A 26 00         [ 7]  106 	ld	h, #0x00
                            107 ;api/uart.c:54: }
   001C C9            [10]  108 	ret
                            109 ;api/uart.c:56: void uart_write(char *str)
                            110 ;	---------------------------------
                            111 ; Function uart_write
                            112 ; ---------------------------------
   001D                     113 _uart_write::
                            114 ;api/uart.c:60: for(i = 0; str[i] != 0; i++)
   001D 01 00 00      [10]  115 	ld	bc, #0x0000
   0020                     116 00103$:
   0020 21 02 00      [10]  117 	ld	hl, #2
   0023 39            [11]  118 	add	hl, sp
   0024 7E            [ 7]  119 	ld	a, (hl)
   0025 23            [ 6]  120 	inc	hl
   0026 66            [ 7]  121 	ld	h, (hl)
   0027 6F            [ 4]  122 	ld	l, a
   0028 09            [11]  123 	add	hl, bc
   0029 7E            [ 7]  124 	ld	a, (hl)
   002A B7            [ 4]  125 	or	a, a
   002B C8            [11]  126 	ret	Z
                            127 ;api/uart.c:62: putchar(str[i]);
   002C 5F            [ 4]  128 	ld	e, a
   002D 16 00         [ 7]  129 	ld	d, #0x00
   002F C5            [11]  130 	push	bc
   0030 D5            [11]  131 	push	de
   0031 CDr00r00      [17]  132 	call	_putchar
   0034 F1            [10]  133 	pop	af
   0035 C1            [10]  134 	pop	bc
                            135 ;api/uart.c:60: for(i = 0; str[i] != 0; i++)
   0036 03            [ 6]  136 	inc	bc
                            137 ;api/uart.c:64: }
   0037 18 E7         [12]  138 	jr	00103$
                            139 ;api/uart.c:66: void uart_initialize(uint16_t baud)
                            140 ;	---------------------------------
                            141 ; Function uart_initialize
                            142 ; ---------------------------------
   0039                     143 _uart_initialize::
   0039 CDr00r00      [17]  144 	call	___sdcc_enter_ix
                            145 ;api/uart.c:69: uint32_t div = (uint32_t)XTAL_FREQ / ((uint32_t)baud * (uint32_t)16);
   003C DD 5E 04      [19]  146 	ld	e, 4 (ix)
   003F DD 56 05      [19]  147 	ld	d, 5 (ix)
   0042 21 00 00      [10]  148 	ld	hl, #0x0000
   0045 06 04         [ 7]  149 	ld	b, #0x04
   0047                     150 00103$:
   0047 CB 23         [ 8]  151 	sla	e
   0049 CB 12         [ 8]  152 	rl	d
   004B ED 6A         [15]  153 	adc	hl, hl
   004D 10 F8         [13]  154 	djnz	00103$
   004F E5            [11]  155 	push	hl
   0050 D5            [11]  156 	push	de
   0051 21 B7 00      [10]  157 	ld	hl, #0x00b7
   0054 E5            [11]  158 	push	hl
   0055 21 00 1B      [10]  159 	ld	hl, #0x1b00
   0058 E5            [11]  160 	push	hl
   0059 CDr00r00      [17]  161 	call	__divulong
   005C F1            [10]  162 	pop	af
   005D F1            [10]  163 	pop	af
   005E F1            [10]  164 	pop	af
   005F F1            [10]  165 	pop	af
   0060 4D            [ 4]  166 	ld	c, l
   0061 44            [ 4]  167 	ld	b, h
                            168 ;api/uart.c:71: uart_lcr = 0x80; /* SET DLAB ON */
   0062 3E 80         [ 7]  169 	ld	a, #0x80
   0064 D3 1B         [11]  170 	out	(_uart_lcr), a
                            171 ;api/uart.c:72: uart_dm0 = (uint8_t)(div & 0xFF);
   0066 79            [ 4]  172 	ld	a, c
   0067 D3 18         [11]  173 	out	(_uart_dm0), a
                            174 ;api/uart.c:73: uart_dm1 = (uint8_t)(div >> 8);
   0069 78            [ 4]  175 	ld	a, b
   006A D3 19         [11]  176 	out	(_uart_dm1), a
                            177 ;api/uart.c:75: uart_lcr = 0x03; /* 8 Bits, No Parity, 1 Stop Bit */
   006C 3E 03         [ 7]  178 	ld	a, #0x03
   006E D3 1B         [11]  179 	out	(_uart_lcr), a
                            180 ;api/uart.c:76: uart_mcr = 0x00;
   0070 3E 00         [ 7]  181 	ld	a, #0x00
   0072 D3 1C         [11]  182 	out	(_uart_mcr), a
                            183 ;api/uart.c:77: }
   0074 DD E1         [14]  184 	pop	ix
   0076 C9            [10]  185 	ret
                            186 	.area _CODE
                            187 	.area _INITIALIZER
                            188 	.area _CABS (ABS)
